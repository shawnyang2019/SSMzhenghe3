<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--spring配置文件，这里主要配置和业务逻辑有关的,比如说数据源、事物控制-->
    <!--配置对象扫描-->
    <context:component-scan base-package="com.shawnyanglearning">
        <!--除了控制器,其他的都要扫描，注意和applicationContext-springMVC.xml里面扫描的区别，所有标了@controller注解的都是控制器-->
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>

    <!--=================数据源引入的配置，对应于数据源properties文件===========================-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--数据库属性-->
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <!--数据库驱动类属性-->
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <!--数据库用户名-->
        <property name="user" value="${jdbc.user}"></property>
        <!--数据库密码-->
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--========================配置和Mybatis的整合=========================-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--指定数据源的位置-->
        <property name="dataSource" ref="pooledDataSource"></property>
        <!--指定mybatis.mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <!--配置扫描器，扫描dao层下面的所有文件，将mybatis接口的实现加入到ioc容器中,-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao接口的实现，加入到IOC容器中-->
        <property name="basePackage" value="com.shawnyanglearning.dao"></property>
    </bean>

    <!--配置一个可以执行批量的sqlsession-->
    <bean id="sqlSession " class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!--====================事物控制的配置========================-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--指定需要控制住的数据源-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>

    <!--1 开启基于注解的事物；2 使用xml配置形式的事物（主要的是使用配置式-->
    <aop:config>
        <!--切入点表达式-->
        <aop:pointcut id="txPoint" expression="execution(* com.shawnyanglearning.service..*(..))"></aop:pointcut>
        <!--配置事物增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>
    <!--配置事物增强，事物如何切入-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--下面表示所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--下面表示以get开始的所有方法都是只读的-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--Spring配置文件的核心点（数据源、与mybatis的整合、事务控制-->
</beans>
